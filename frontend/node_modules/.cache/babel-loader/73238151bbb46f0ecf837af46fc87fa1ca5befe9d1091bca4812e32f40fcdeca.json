{"ast":null,"code":"import axios from \"axios\";\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\nexport const getFlight = () => {\n  return axios.get(`http://localhost:8080/mock-fetch-flight-summary`).then(res => {\n    const flight = res.data;\n    if (!flight.initialDepartureTime || !flight.finalArrivalTime || !flight.totalDuration || !flight.segments) {\n      throw new Error(\"Incomplete flight data\");\n    }\n    return {\n      initialDepartureTime: flight.initialDepartureTime,\n      finalArrivalTime: flight.finalArrivalTime,\n      departureAirportName: flight.initialDepartureAirportName || \"Unknown\",\n      departureAirportCode: flight.initialDepartureAirportCode || \"Unknown\",\n      arrivalAirportName: flight.finalArrivalAirportName || \"Unknown\",\n      arrivalAirportCode: flight.finalArrivalAirportCode || \"Unknown\",\n      airlineName: flight.airlineName || \"Unknown\",\n      airlineCode: flight.airlineCode || \"Unknown\",\n      operatingAirlineName: flight.operatingAirlineName || flight.airlineName,\n      operatingAirlineCode: flight.operatingAirlineCode || flight.airlineCode,\n      totalDuration: flight.totalDuration,\n      stops: flight.stops || [],\n      totalPrice: flight.totalPrice || null,\n      pricePerTraveler: flight.pricePerTraveler || null,\n      segments: flight.segments || []\n    };\n  });\n};\nexport const getSingleFlight = flightId => {\n  return axios.get(`https://localhost:7039/api/Flight/${flightId}`).then(response => {\n    return response.data;\n  });\n};\nexport const getUser = userId => {\n  return axios.get(`https://localhost:7039/api/User/${userId}`).then(response => {\n    return response.data;\n  });\n};\nexport const postBooking = (userId, FlightId, numPassengers) => {\n  const postBody = {\n    numPassengers: numPassengers\n  };\n  return axios.post(`https://localhost:7039/api/Bookings?UserId=${userId}&FlightId=${FlightId}`, postBody).then(response => {\n    return response.data;\n  });\n};\nexport const getBookings = userId => {\n  return axios.get(`https://localhost:7039/api/Bookings?UserId=${userId}`).then(response => {\n    return response.data;\n  });\n};","map":{"version":3,"names":["axios","process","env","NODE_TLS_REJECT_UNAUTHORIZED","getFlight","get","then","res","flight","data","initialDepartureTime","finalArrivalTime","totalDuration","segments","Error","departureAirportName","initialDepartureAirportName","departureAirportCode","initialDepartureAirportCode","arrivalAirportName","finalArrivalAirportName","arrivalAirportCode","finalArrivalAirportCode","airlineName","airlineCode","operatingAirlineName","operatingAirlineCode","stops","totalPrice","pricePerTraveler","getSingleFlight","flightId","response","getUser","userId","postBooking","FlightId","numPassengers","postBody","post","getBookings"],"sources":["/Users/ares.castros/Documents/Breakable Toy II/frontend/src/Utils/api.ts"],"sourcesContent":["import axios from \"axios\";\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\ninterface FlightData {\n  flightId: string;\n  initialDepartureDateTime: string;\n  finalArrivalDateTime: string;\n  departureAirportName: string;\n  departureAirportCode: string;\n  arrivalAirportName: string;\n  arrivalAirportCode: string;\n  airlineName: string;\n  airlineCode: string;\n  operatingAirlineName?: string; // Optional if different from the main airline\n  operatingAirlineCode?: string; // Optional if different from the main airline\n  totalFlightDuration: string;\n  stops?: Array<{\n    airportName: string;\n    airportCode: string;\n    layoverTime: string;\n  }>;\n  totalPrice: number;\n  pricePerTraveler: number;\n}\n\n\nexport const getFlight = (): Promise<FlightData> => {\n  return axios\n    .get(`http://localhost:8080/mock-fetch-flight-summary`)\n    .then((res: any) => {\n      const flight = res.data;\n\n      if (\n        !flight.initialDepartureTime ||\n        !flight.finalArrivalTime ||\n        !flight.totalDuration ||\n        !flight.segments\n      ) {\n        throw new Error(\"Incomplete flight data\");\n      }\n\n      return {\n        initialDepartureTime: flight.initialDepartureTime,\n        finalArrivalTime: flight.finalArrivalTime,\n        departureAirportName: flight.initialDepartureAirportName || \"Unknown\",\n        departureAirportCode: flight.initialDepartureAirportCode || \"Unknown\",\n        arrivalAirportName: flight.finalArrivalAirportName || \"Unknown\",\n        arrivalAirportCode: flight.finalArrivalAirportCode || \"Unknown\",\n        airlineName: flight.airlineName || \"Unknown\",\n        airlineCode: flight.airlineCode || \"Unknown\",\n        operatingAirlineName:\n          flight.operatingAirlineName || flight.airlineName,\n        operatingAirlineCode:\n          flight.operatingAirlineCode || flight.airlineCode,\n        totalDuration: flight.totalDuration,\n        stops: flight.stops || [],\n        totalPrice: flight.totalPrice || null,\n        pricePerTraveler: flight.pricePerTraveler || null,\n        segments: flight.segments || [],\n      };\n    });\n};\n\n\nexport const getSingleFlight = (flightId: string) => {\n  return axios\n    .get(`https://localhost:7039/api/Flight/${flightId}`)\n    .then((response: any) => {\n      return response.data;\n    });\n};\n\nexport const getUser = (userId: number) => {\n  return axios\n    .get(`https://localhost:7039/api/User/${userId}`)\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const postBooking = (\n  userId: number,\n  FlightId: string,\n  numPassengers: number\n) => {\n  const postBody = {\n    numPassengers: numPassengers,\n  };\n\n  return axios\n    .post(\n      `https://localhost:7039/api/Bookings?UserId=${userId}&FlightId=${FlightId}`,\n      postBody\n    )\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const getBookings = (userId: number) => {\n  return axios\n    .get(`https://localhost:7039/api/Bookings?UserId=${userId}`)\n    .then((response) => {\n      return response.data;\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBC,OAAO,CAACC,GAAG,CAACC,4BAA4B,GAAG,GAAG;AAyB9C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAA2B;EAClD,OAAOJ,KAAK,CACTK,GAAG,CAAC,iDAAiD,CAAC,CACtDC,IAAI,CAAEC,GAAQ,IAAK;IAClB,MAAMC,MAAM,GAAGD,GAAG,CAACE,IAAI;IAEvB,IACE,CAACD,MAAM,CAACE,oBAAoB,IAC5B,CAACF,MAAM,CAACG,gBAAgB,IACxB,CAACH,MAAM,CAACI,aAAa,IACrB,CAACJ,MAAM,CAACK,QAAQ,EAChB;MACA,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAO;MACLJ,oBAAoB,EAAEF,MAAM,CAACE,oBAAoB;MACjDC,gBAAgB,EAAEH,MAAM,CAACG,gBAAgB;MACzCI,oBAAoB,EAAEP,MAAM,CAACQ,2BAA2B,IAAI,SAAS;MACrEC,oBAAoB,EAAET,MAAM,CAACU,2BAA2B,IAAI,SAAS;MACrEC,kBAAkB,EAAEX,MAAM,CAACY,uBAAuB,IAAI,SAAS;MAC/DC,kBAAkB,EAAEb,MAAM,CAACc,uBAAuB,IAAI,SAAS;MAC/DC,WAAW,EAAEf,MAAM,CAACe,WAAW,IAAI,SAAS;MAC5CC,WAAW,EAAEhB,MAAM,CAACgB,WAAW,IAAI,SAAS;MAC5CC,oBAAoB,EAClBjB,MAAM,CAACiB,oBAAoB,IAAIjB,MAAM,CAACe,WAAW;MACnDG,oBAAoB,EAClBlB,MAAM,CAACkB,oBAAoB,IAAIlB,MAAM,CAACgB,WAAW;MACnDZ,aAAa,EAAEJ,MAAM,CAACI,aAAa;MACnCe,KAAK,EAAEnB,MAAM,CAACmB,KAAK,IAAI,EAAE;MACzBC,UAAU,EAAEpB,MAAM,CAACoB,UAAU,IAAI,IAAI;MACrCC,gBAAgB,EAAErB,MAAM,CAACqB,gBAAgB,IAAI,IAAI;MACjDhB,QAAQ,EAAEL,MAAM,CAACK,QAAQ,IAAI;IAC/B,CAAC;EACH,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMiB,eAAe,GAAIC,QAAgB,IAAK;EACnD,OAAO/B,KAAK,CACTK,GAAG,CAAC,qCAAqC0B,QAAQ,EAAE,CAAC,CACpDzB,IAAI,CAAE0B,QAAa,IAAK;IACvB,OAAOA,QAAQ,CAACvB,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMwB,OAAO,GAAIC,MAAc,IAAK;EACzC,OAAOlC,KAAK,CACTK,GAAG,CAAC,mCAAmC6B,MAAM,EAAE,CAAC,CAChD5B,IAAI,CAAE0B,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAACvB,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAM0B,WAAW,GAAGA,CACzBD,MAAc,EACdE,QAAgB,EAChBC,aAAqB,KAClB;EACH,MAAMC,QAAQ,GAAG;IACfD,aAAa,EAAEA;EACjB,CAAC;EAED,OAAOrC,KAAK,CACTuC,IAAI,CACH,8CAA8CL,MAAM,aAAaE,QAAQ,EAAE,EAC3EE,QACF,CAAC,CACAhC,IAAI,CAAE0B,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAACvB,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAM+B,WAAW,GAAIN,MAAc,IAAK;EAC7C,OAAOlC,KAAK,CACTK,GAAG,CAAC,8CAA8C6B,MAAM,EAAE,CAAC,CAC3D5B,IAAI,CAAE0B,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAACvB,IAAI;EACtB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
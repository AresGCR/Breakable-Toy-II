{"ast":null,"code":"import axios from \"axios\";\n\n// Segment interface\n\n// FlightData interface\n\n// Fetch flight offers with dynamic parameters from the flight search component\nexport const fetchFlightOffers = (originLocationCode, destinationLocationCode, departureDate, returnDate,\n// Optional for round-trip\ncurrencyCode = \"USD\", nonStop = false, adults = 1) => {\n  // Determine the API URL based on the presence of returnDate (round-trip vs one-way)\n  const apiUrl = returnDate ? `http://localhost:8080/fetch-flight-offers-roundtrip` : `http://localhost:8080/fetch-flight-offers-oneway`;\n  const params = {\n    originLocationCode,\n    destinationLocationCode,\n    departureDate,\n    ...(returnDate && {\n      returnDate\n    }),\n    // Include returnDate if round-trip\n    currencyCode,\n    nonStop,\n    adults\n  };\n  return axios.get(apiUrl, {\n    params\n  }).then(res => {\n    const flights = res.data;\n\n    // Map through flight offers and ensure each matches the FlightData interface\n    const flightDataList = flights.map(flight => ({\n      id: flight.id,\n      initialDepartureTime: flight.initialDepartureTime,\n      finalArrivalTime: flight.finalArrivalTime,\n      departureAirportCode: flight.departureAirportCode,\n      arrivalAirportCode: flight.arrivalAirportCode,\n      airlineCode: flight.airlineCode,\n      operatingAirlineCode: flight.operatingAirlineCode,\n      totalDuration: flight.totalDuration,\n      totalPrice: flight.totalPrice,\n      pricePerTraveler: flight.pricePerTraveler,\n      segments: flight.segments.map(segment => ({\n        departureTime: segment.departureTime,\n        departureAirportCode: segment.departureAirportCode,\n        arrivalTime: segment.arrivalTime,\n        arrivalAirportCode: segment.arrivalAirportCode,\n        airlineCode: segment.airlineCode,\n        flightNumber: segment.flightNumber,\n        operatingAirlineCode: segment.operatingAirlineCode,\n        aircraftType: segment.aircraftType\n      }))\n    }));\n    return flightDataList;\n  }).catch(error => {\n    console.error(\"Error fetching flight data:\", error);\n    return [];\n  });\n};\n\n// Search airports dynamically based on the provided keyword\nexport const searchAirports = keyword => {\n  return axios.get(`http://localhost:8080/search-locations`, {\n    params: {\n      keyword\n    }\n  }).then(res => res.data).catch(error => {\n    console.error(\"Error fetching airport data:\", error);\n    return [];\n  });\n};","map":{"version":3,"names":["axios","fetchFlightOffers","originLocationCode","destinationLocationCode","departureDate","returnDate","currencyCode","nonStop","adults","apiUrl","params","get","then","res","flights","data","flightDataList","map","flight","id","initialDepartureTime","finalArrivalTime","departureAirportCode","arrivalAirportCode","airlineCode","operatingAirlineCode","totalDuration","totalPrice","pricePerTraveler","segments","segment","departureTime","arrivalTime","flightNumber","aircraftType","catch","error","console","searchAirports","keyword"],"sources":["/Users/ares.castros/Documents/Breakable Toy II/frontend/src/Utils/api.ts"],"sourcesContent":["import axios from \"axios\";\n\n// Segment interface\nexport interface Segment {\n  departureTime: string;\n  departureAirportCode: string;\n  arrivalTime: string;\n  arrivalAirportCode: string;\n  airlineCode: string;\n  flightNumber: string;\n  operatingAirlineCode: string;\n  aircraftType: string;\n}\n\n// FlightData interface\nexport interface FlightData {\n  id: number;\n  initialDepartureTime: string;\n  finalArrivalTime: string;\n  departureAirportCode: string;\n  arrivalAirportCode: string;\n  airlineCode: string;\n  operatingAirlineCode: string;\n  totalDuration: string;\n  totalPrice: number;\n  pricePerTraveler: number;\n  segments: Segment[];\n}\n\n// Fetch flight offers with dynamic parameters from the flight search component\nexport const fetchFlightOffers = (\n  originLocationCode: string,\n  destinationLocationCode: string,\n  departureDate: string,\n  returnDate?: string, // Optional for round-trip\n  currencyCode: string = \"USD\",\n  nonStop: boolean = false,\n  adults: number = 1\n): Promise<FlightData[]> => {\n  // Determine the API URL based on the presence of returnDate (round-trip vs one-way)\n  const apiUrl = returnDate\n    ? `http://localhost:8080/fetch-flight-offers-roundtrip`\n    : `http://localhost:8080/fetch-flight-offers-oneway`;\n\n  const params = {\n    originLocationCode,\n    destinationLocationCode,\n    departureDate,\n    ...(returnDate && { returnDate }), // Include returnDate if round-trip\n    currencyCode,\n    nonStop,\n    adults,\n  };\n\n  return axios\n    .get(apiUrl, { params })\n    .then((res: any) => {\n      const flights = res.data;\n\n      // Map through flight offers and ensure each matches the FlightData interface\n      const flightDataList: FlightData[] = flights.map((flight: any) => ({\n        id: flight.id,\n        initialDepartureTime: flight.initialDepartureTime,\n        finalArrivalTime: flight.finalArrivalTime,\n        departureAirportCode: flight.departureAirportCode,\n        arrivalAirportCode: flight.arrivalAirportCode,\n        airlineCode: flight.airlineCode,\n        operatingAirlineCode: flight.operatingAirlineCode,\n        totalDuration: flight.totalDuration,\n        totalPrice: flight.totalPrice,\n        pricePerTraveler: flight.pricePerTraveler,\n        segments: flight.segments.map((segment: any) => ({\n          departureTime: segment.departureTime,\n          departureAirportCode: segment.departureAirportCode,\n          arrivalTime: segment.arrivalTime,\n          arrivalAirportCode: segment.arrivalAirportCode,\n          airlineCode: segment.airlineCode,\n          flightNumber: segment.flightNumber,\n          operatingAirlineCode: segment.operatingAirlineCode,\n          aircraftType: segment.aircraftType,\n        })),\n      }));\n\n      return flightDataList;\n    })\n    .catch((error) => {\n      console.error(\"Error fetching flight data:\", error);\n      return [];\n    });\n};\n\n// Search airports dynamically based on the provided keyword\nexport const searchAirports = (keyword: string): Promise<string[]> => {\n  return axios\n    .get(`http://localhost:8080/search-locations`, {\n      params: { keyword },\n    })\n    .then((res) => res.data)\n    .catch((error) => {\n      console.error(\"Error fetching airport data:\", error);\n      return [];\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAYA;;AAeA;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAC/BC,kBAA0B,EAC1BC,uBAA+B,EAC/BC,aAAqB,EACrBC,UAAmB;AAAE;AACrBC,YAAoB,GAAG,KAAK,EAC5BC,OAAgB,GAAG,KAAK,EACxBC,MAAc,GAAG,CAAC,KACQ;EAC1B;EACA,MAAMC,MAAM,GAAGJ,UAAU,GACrB,qDAAqD,GACrD,kDAAkD;EAEtD,MAAMK,MAAM,GAAG;IACbR,kBAAkB;IAClBC,uBAAuB;IACvBC,aAAa;IACb,IAAIC,UAAU,IAAI;MAAEA;IAAW,CAAC,CAAC;IAAE;IACnCC,YAAY;IACZC,OAAO;IACPC;EACF,CAAC;EAED,OAAOR,KAAK,CACTW,GAAG,CAACF,MAAM,EAAE;IAAEC;EAAO,CAAC,CAAC,CACvBE,IAAI,CAAEC,GAAQ,IAAK;IAClB,MAAMC,OAAO,GAAGD,GAAG,CAACE,IAAI;;IAExB;IACA,MAAMC,cAA4B,GAAGF,OAAO,CAACG,GAAG,CAAEC,MAAW,KAAM;MACjEC,EAAE,EAAED,MAAM,CAACC,EAAE;MACbC,oBAAoB,EAAEF,MAAM,CAACE,oBAAoB;MACjDC,gBAAgB,EAAEH,MAAM,CAACG,gBAAgB;MACzCC,oBAAoB,EAAEJ,MAAM,CAACI,oBAAoB;MACjDC,kBAAkB,EAAEL,MAAM,CAACK,kBAAkB;MAC7CC,WAAW,EAAEN,MAAM,CAACM,WAAW;MAC/BC,oBAAoB,EAAEP,MAAM,CAACO,oBAAoB;MACjDC,aAAa,EAAER,MAAM,CAACQ,aAAa;MACnCC,UAAU,EAAET,MAAM,CAACS,UAAU;MAC7BC,gBAAgB,EAAEV,MAAM,CAACU,gBAAgB;MACzCC,QAAQ,EAAEX,MAAM,CAACW,QAAQ,CAACZ,GAAG,CAAEa,OAAY,KAAM;QAC/CC,aAAa,EAAED,OAAO,CAACC,aAAa;QACpCT,oBAAoB,EAAEQ,OAAO,CAACR,oBAAoB;QAClDU,WAAW,EAAEF,OAAO,CAACE,WAAW;QAChCT,kBAAkB,EAAEO,OAAO,CAACP,kBAAkB;QAC9CC,WAAW,EAAEM,OAAO,CAACN,WAAW;QAChCS,YAAY,EAAEH,OAAO,CAACG,YAAY;QAClCR,oBAAoB,EAAEK,OAAO,CAACL,oBAAoB;QAClDS,YAAY,EAAEJ,OAAO,CAACI;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAOlB,cAAc;EACvB,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAIC,OAAe,IAAwB;EACpE,OAAOvC,KAAK,CACTW,GAAG,CAAC,wCAAwC,EAAE;IAC7CD,MAAM,EAAE;MAAE6B;IAAQ;EACpB,CAAC,CAAC,CACD3B,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACE,IAAI,CAAC,CACvBoB,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from \"axios\";\nexport const getFlight = () => {\n  return axios.get(`http://localhost:8080/mock-fetch-flight-summary`).then(res => {\n    const flight = res.data;\n\n    // Ensure the returned object matches FlightData exactly\n    const flightData = {\n      flightId: flight.flightId || \"Unknown\",\n      // Add a default or expected value\n      initialDepartureDateTime: flight.initialDepartureTime,\n      finalArrivalDateTime: flight.finalArrivalTime,\n      departureAirportName: flight.initialDepartureAirportName || \"Unknown\",\n      departureAirportCode: flight.initialDepartureAirportCode || \"Unknown\",\n      arrivalAirportName: flight.finalArrivalAirportName || \"Unknown\",\n      arrivalAirportCode: flight.finalArrivalAirportCode || \"Unknown\",\n      airlineName: flight.airlineName || \"Unknown\",\n      airlineCode: flight.airlineCode || \"Unknown\",\n      operatingAirlineName: flight.operatingAirlineName || flight.airlineName,\n      operatingAirlineCode: flight.operatingAirlineCode || flight.airlineCode,\n      totalFlightDuration: flight.totalDuration,\n      stops: flight.stops || [],\n      totalPrice: flight.totalPrice || null,\n      pricePerTraveler: flight.pricePerTraveler || null,\n      segments: flight.segments.map(segment => ({\n        departureTime: segment.departureTime,\n        departureAirportCode: segment.departureAirportCode,\n        arrivalTime: segment.arrivalTime,\n        arrivalAirportCode: segment.arrivalAirportCode,\n        airlineCode: segment.airlineCode,\n        flightNumber: segment.flightNumber,\n        operatingAirlineCode: segment.operatingAirlineCode,\n        aircraftType: segment.aircraftType\n      }))\n    };\n    return flightData;\n  });\n};","map":{"version":3,"names":["axios","getFlight","get","then","res","flight","data","flightData","flightId","initialDepartureDateTime","initialDepartureTime","finalArrivalDateTime","finalArrivalTime","departureAirportName","initialDepartureAirportName","departureAirportCode","initialDepartureAirportCode","arrivalAirportName","finalArrivalAirportName","arrivalAirportCode","finalArrivalAirportCode","airlineName","airlineCode","operatingAirlineName","operatingAirlineCode","totalFlightDuration","totalDuration","stops","totalPrice","pricePerTraveler","segments","map","segment","departureTime","arrivalTime","flightNumber","aircraftType"],"sources":["/Users/ares.castros/Documents/Breakable Toy II/frontend/src/Utils/api.ts"],"sourcesContent":["import axios from \"axios\";\n\ninterface FlightData {\n  flightId: string;\n  initialDepartureDateTime: string;\n  finalArrivalDateTime: string;\n  departureAirportName: string;\n  departureAirportCode: string;\n  arrivalAirportName: string;\n  arrivalAirportCode: string;\n  airlineName: string;\n  airlineCode: string;\n  operatingAirlineName?: string; // Optional if different from the main airline\n  operatingAirlineCode?: string; // Optional if different from the main airline\n  totalFlightDuration: string;\n  stops?: Array<{\n    airportName: string;\n    airportCode: string;\n    layoverTime: string;\n  }>;\n  totalPrice: number | null;\n  pricePerTraveler: number | null;\n  segments: Array<{\n    departureTime: string;\n    departureAirportCode: string;\n    arrivalTime: string;\n    arrivalAirportCode: string;\n    airlineCode: string;\n    flightNumber: string;\n    operatingAirlineCode: string;\n    aircraftType: string;\n  }>;\n}\n\nexport const getFlight = (): Promise<FlightData> => {\n  return axios\n    .get(`http://localhost:8080/mock-fetch-flight-summary`)\n    .then((res: any) => {\n      const flight = res.data;\n\n      // Ensure the returned object matches FlightData exactly\n      const flightData: FlightData = {\n        flightId: flight.flightId || \"Unknown\", // Add a default or expected value\n        initialDepartureDateTime: flight.initialDepartureTime,\n        finalArrivalDateTime: flight.finalArrivalTime,\n        departureAirportName: flight.initialDepartureAirportName || \"Unknown\",\n        departureAirportCode: flight.initialDepartureAirportCode || \"Unknown\",\n        arrivalAirportName: flight.finalArrivalAirportName || \"Unknown\",\n        arrivalAirportCode: flight.finalArrivalAirportCode || \"Unknown\",\n        airlineName: flight.airlineName || \"Unknown\",\n        airlineCode: flight.airlineCode || \"Unknown\",\n        operatingAirlineName: flight.operatingAirlineName || flight.airlineName,\n        operatingAirlineCode: flight.operatingAirlineCode || flight.airlineCode,\n        totalFlightDuration: flight.totalDuration,\n        stops: flight.stops || [],\n        totalPrice: flight.totalPrice || null,\n        pricePerTraveler: flight.pricePerTraveler || null,\n        segments: flight.segments.map((segment: any) => ({\n          departureTime: segment.departureTime,\n          departureAirportCode: segment.departureAirportCode,\n          arrivalTime: segment.arrivalTime,\n          arrivalAirportCode: segment.arrivalAirportCode,\n          airlineCode: segment.airlineCode,\n          flightNumber: segment.flightNumber,\n          operatingAirlineCode: segment.operatingAirlineCode,\n          aircraftType: segment.aircraftType,\n        })),\n      };\n\n      return flightData;\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAkCzB,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAA2B;EAClD,OAAOD,KAAK,CACTE,GAAG,CAAC,iDAAiD,CAAC,CACtDC,IAAI,CAAEC,GAAQ,IAAK;IAClB,MAAMC,MAAM,GAAGD,GAAG,CAACE,IAAI;;IAEvB;IACA,MAAMC,UAAsB,GAAG;MAC7BC,QAAQ,EAAEH,MAAM,CAACG,QAAQ,IAAI,SAAS;MAAE;MACxCC,wBAAwB,EAAEJ,MAAM,CAACK,oBAAoB;MACrDC,oBAAoB,EAAEN,MAAM,CAACO,gBAAgB;MAC7CC,oBAAoB,EAAER,MAAM,CAACS,2BAA2B,IAAI,SAAS;MACrEC,oBAAoB,EAAEV,MAAM,CAACW,2BAA2B,IAAI,SAAS;MACrEC,kBAAkB,EAAEZ,MAAM,CAACa,uBAAuB,IAAI,SAAS;MAC/DC,kBAAkB,EAAEd,MAAM,CAACe,uBAAuB,IAAI,SAAS;MAC/DC,WAAW,EAAEhB,MAAM,CAACgB,WAAW,IAAI,SAAS;MAC5CC,WAAW,EAAEjB,MAAM,CAACiB,WAAW,IAAI,SAAS;MAC5CC,oBAAoB,EAAElB,MAAM,CAACkB,oBAAoB,IAAIlB,MAAM,CAACgB,WAAW;MACvEG,oBAAoB,EAAEnB,MAAM,CAACmB,oBAAoB,IAAInB,MAAM,CAACiB,WAAW;MACvEG,mBAAmB,EAAEpB,MAAM,CAACqB,aAAa;MACzCC,KAAK,EAAEtB,MAAM,CAACsB,KAAK,IAAI,EAAE;MACzBC,UAAU,EAAEvB,MAAM,CAACuB,UAAU,IAAI,IAAI;MACrCC,gBAAgB,EAAExB,MAAM,CAACwB,gBAAgB,IAAI,IAAI;MACjDC,QAAQ,EAAEzB,MAAM,CAACyB,QAAQ,CAACC,GAAG,CAAEC,OAAY,KAAM;QAC/CC,aAAa,EAAED,OAAO,CAACC,aAAa;QACpClB,oBAAoB,EAAEiB,OAAO,CAACjB,oBAAoB;QAClDmB,WAAW,EAAEF,OAAO,CAACE,WAAW;QAChCf,kBAAkB,EAAEa,OAAO,CAACb,kBAAkB;QAC9CG,WAAW,EAAEU,OAAO,CAACV,WAAW;QAChCa,YAAY,EAAEH,OAAO,CAACG,YAAY;QAClCX,oBAAoB,EAAEQ,OAAO,CAACR,oBAAoB;QAClDY,YAAY,EAAEJ,OAAO,CAACI;MACxB,CAAC,CAAC;IACJ,CAAC;IAED,OAAO7B,UAAU;EACnB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
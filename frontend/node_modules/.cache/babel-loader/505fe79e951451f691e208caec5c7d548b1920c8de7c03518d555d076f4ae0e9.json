{"ast":null,"code":"import axios from \"axios\";\n\n// Segment interface matching the inner Segment class in Java\n\n// FlightData interface matching the structure of the Java FlightSummary class\n\n// Fetch flight summary from the backend service with pagination support\nexport const getFlight = (page = 0, size = 5) => {\n  return axios.get(`http://localhost:8080/mock-fetch-flight-summary`, {\n    params: {\n      page,\n      size\n    } // Pass page and size as query parameters\n  }).then(res => {\n    const flights = res.data;\n\n    // Map through flight summaries and ensure each matches the FlightData interface\n    const flightDataList = flights.map(flight => ({\n      id: flight.id,\n      initialDepartureTime: flight.initialDepartureTime,\n      finalArrivalTime: flight.finalArrivalTime,\n      departureAirportCode: flight.departureAirportCode,\n      arrivalAirportCode: flight.arrivalAirportCode,\n      airlineCode: flight.airlineCode,\n      operatingAirlineCode: flight.operatingAirlineCode,\n      totalDuration: flight.totalDuration,\n      totalPrice: flight.totalPrice,\n      pricePerTraveler: flight.pricePerTraveler,\n      segments: flight.segments.map(segment => ({\n        departureTime: segment.departureTime,\n        departureAirportCode: segment.departureAirportCode,\n        arrivalTime: segment.arrivalTime,\n        arrivalAirportCode: segment.arrivalAirportCode,\n        airlineCode: segment.airlineCode,\n        flightNumber: segment.flightNumber,\n        operatingAirlineCode: segment.operatingAirlineCode,\n        aircraftType: segment.aircraftType\n      }))\n    }));\n    return flightDataList;\n  }).catch(error => {\n    console.error(\"Error fetching flight data:\", error);\n    return [];\n  });\n};\nexport const searchAirports = keyword => {\n  return axios.get(`http://localhost:8080/search-locations`, {\n    params: {\n      keyword\n    }\n  }).then(res => {\n    return res.data; // Assuming the response is an array of IATA codes\n  }).catch(error => {\n    console.error(\"Error fetching airport data:\", error);\n    return [];\n  });\n};","map":{"version":3,"names":["axios","getFlight","page","size","get","params","then","res","flights","data","flightDataList","map","flight","id","initialDepartureTime","finalArrivalTime","departureAirportCode","arrivalAirportCode","airlineCode","operatingAirlineCode","totalDuration","totalPrice","pricePerTraveler","segments","segment","departureTime","arrivalTime","flightNumber","aircraftType","catch","error","console","searchAirports","keyword"],"sources":["/Users/ares.castros/Documents/Breakable Toy II/frontend/src/Utils/api.ts"],"sourcesContent":["import axios from \"axios\";\n\n// Segment interface matching the inner Segment class in Java\nexport interface Segment {\n  departureTime: string;\n  departureAirportCode: string;\n  arrivalTime: string;\n  arrivalAirportCode: string;\n  airlineCode: string;\n  flightNumber: string;\n  operatingAirlineCode: string;\n  aircraftType: string;\n}\n\n// FlightData interface matching the structure of the Java FlightSummary class\nexport interface FlightData {\n  id: number; // Unique flight offer ID\n  initialDepartureTime: string;\n  finalArrivalTime: string;\n  departureAirportCode: string;\n  arrivalAirportCode: string;\n  airlineCode: string;\n  operatingAirlineCode: string;\n  totalDuration: string;\n  totalPrice: number;\n  pricePerTraveler: number;\n  segments: Segment[]; // Array of flight segments\n}\n\n// Fetch flight summary from the backend service with pagination support\nexport const getFlight = (page: number = 0, size: number = 5): Promise<FlightData[]> => {\n  return axios\n    .get(`http://localhost:8080/mock-fetch-flight-summary`, {\n      params: { page, size } // Pass page and size as query parameters\n    })\n    .then((res: any) => {\n      const flights = res.data;\n\n      // Map through flight summaries and ensure each matches the FlightData interface\n      const flightDataList: FlightData[] = flights.map((flight: any) => ({\n        id: flight.id,\n        initialDepartureTime: flight.initialDepartureTime,\n        finalArrivalTime: flight.finalArrivalTime,\n        departureAirportCode: flight.departureAirportCode,\n        arrivalAirportCode: flight.arrivalAirportCode,\n        airlineCode: flight.airlineCode,\n        operatingAirlineCode: flight.operatingAirlineCode,\n        totalDuration: flight.totalDuration,\n        totalPrice: flight.totalPrice,\n        pricePerTraveler: flight.pricePerTraveler,\n        segments: flight.segments.map((segment: any) => ({\n          departureTime: segment.departureTime,\n          departureAirportCode: segment.departureAirportCode,\n          arrivalTime: segment.arrivalTime,\n          arrivalAirportCode: segment.arrivalAirportCode,\n          airlineCode: segment.airlineCode,\n          flightNumber: segment.flightNumber,\n          operatingAirlineCode: segment.operatingAirlineCode,\n          aircraftType: segment.aircraftType,\n        })),\n      }));\n\n      return flightDataList;\n    })\n    .catch((error) => {\n      console.error(\"Error fetching flight data:\", error);\n      return [];\n    });\n};\n\nexport const searchAirports = (keyword: string): Promise<string[]> => {\n  return axios\n    .get(`http://localhost:8080/search-locations`, {\n      params: { keyword }\n    })\n    .then((res) => {\n      return res.data; // Assuming the response is an array of IATA codes\n    })\n    .catch((error) => {\n      console.error(\"Error fetching airport data:\", error);\n      return [];\n    });\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAYA;;AAeA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACC,IAAY,GAAG,CAAC,EAAEC,IAAY,GAAG,CAAC,KAA4B;EACtF,OAAOH,KAAK,CACTI,GAAG,CAAC,iDAAiD,EAAE;IACtDC,MAAM,EAAE;MAAEH,IAAI;MAAEC;IAAK,CAAC,CAAC;EACzB,CAAC,CAAC,CACDG,IAAI,CAAEC,GAAQ,IAAK;IAClB,MAAMC,OAAO,GAAGD,GAAG,CAACE,IAAI;;IAExB;IACA,MAAMC,cAA4B,GAAGF,OAAO,CAACG,GAAG,CAAEC,MAAW,KAAM;MACjEC,EAAE,EAAED,MAAM,CAACC,EAAE;MACbC,oBAAoB,EAAEF,MAAM,CAACE,oBAAoB;MACjDC,gBAAgB,EAAEH,MAAM,CAACG,gBAAgB;MACzCC,oBAAoB,EAAEJ,MAAM,CAACI,oBAAoB;MACjDC,kBAAkB,EAAEL,MAAM,CAACK,kBAAkB;MAC7CC,WAAW,EAAEN,MAAM,CAACM,WAAW;MAC/BC,oBAAoB,EAAEP,MAAM,CAACO,oBAAoB;MACjDC,aAAa,EAAER,MAAM,CAACQ,aAAa;MACnCC,UAAU,EAAET,MAAM,CAACS,UAAU;MAC7BC,gBAAgB,EAAEV,MAAM,CAACU,gBAAgB;MACzCC,QAAQ,EAAEX,MAAM,CAACW,QAAQ,CAACZ,GAAG,CAAEa,OAAY,KAAM;QAC/CC,aAAa,EAAED,OAAO,CAACC,aAAa;QACpCT,oBAAoB,EAAEQ,OAAO,CAACR,oBAAoB;QAClDU,WAAW,EAAEF,OAAO,CAACE,WAAW;QAChCT,kBAAkB,EAAEO,OAAO,CAACP,kBAAkB;QAC9CC,WAAW,EAAEM,OAAO,CAACN,WAAW;QAChCS,YAAY,EAAEH,OAAO,CAACG,YAAY;QAClCR,oBAAoB,EAAEK,OAAO,CAACL,oBAAoB;QAClDS,YAAY,EAAEJ,OAAO,CAACI;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAOlB,cAAc;EACvB,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAME,cAAc,GAAIC,OAAe,IAAwB;EACpE,OAAOjC,KAAK,CACTI,GAAG,CAAC,wCAAwC,EAAE;IAC7CC,MAAM,EAAE;MAAE4B;IAAQ;EACpB,CAAC,CAAC,CACD3B,IAAI,CAAEC,GAAG,IAAK;IACb,OAAOA,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from \"axios\";\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\nexport const getFlight = () => {\n  return axios.get(`http://localhost:8080/mock-fetch-flight-summary`).then(res => {\n    return res.data.map(element => {\n      // Extract stops, if any\n      const stops = element.stops ? element.stops.map(stop => ({\n        airportName: stop.airportName,\n        airportCode: stop.airportCode,\n        layoverTime: stop.layoverTime\n      })) : [];\n      return {\n        flightId: element.flightId,\n        initialDepartureDateTime: element.initialDepartureTime,\n        finalArrivalDateTime: element.finalArrivalTime,\n        departureAirportName: element.initialDepartureAirportName,\n        departureAirportCode: element.initialDepartureAirportCode,\n        arrivalAirportName: element.finalArrivalAirportName,\n        arrivalAirportCode: element.finalArrivalAirportCode,\n        airlineName: element.airlineName,\n        airlineCode: element.airlineCode,\n        operatingAirlineName: element.operatingAirlineName || element.airlineName,\n        operatingAirlineCode: element.operatingAirlineCode || element.airlineCode,\n        totalFlightDuration: element.totalDuration,\n        stops: stops.length > 0 ? stops : undefined,\n        totalPrice: element.totalPrice,\n        pricePerTraveler: element.pricePerTraveler\n      };\n    });\n  });\n};\nexport const getSingleFlight = flightId => {\n  return axios.get(`https://localhost:7039/api/Flight/${flightId}`).then(response => {\n    return response.data;\n  });\n};\nexport const getUser = userId => {\n  return axios.get(`https://localhost:7039/api/User/${userId}`).then(response => {\n    return response.data;\n  });\n};\nexport const postBooking = (userId, FlightId, numPassengers) => {\n  const postBody = {\n    numPassengers: numPassengers\n  };\n  return axios.post(`https://localhost:7039/api/Bookings?UserId=${userId}&FlightId=${FlightId}`, postBody).then(response => {\n    return response.data;\n  });\n};\nexport const getBookings = userId => {\n  return axios.get(`https://localhost:7039/api/Bookings?UserId=${userId}`).then(response => {\n    return response.data;\n  });\n};","map":{"version":3,"names":["axios","process","env","NODE_TLS_REJECT_UNAUTHORIZED","getFlight","get","then","res","data","map","element","stops","stop","airportName","airportCode","layoverTime","flightId","initialDepartureDateTime","initialDepartureTime","finalArrivalDateTime","finalArrivalTime","departureAirportName","initialDepartureAirportName","departureAirportCode","initialDepartureAirportCode","arrivalAirportName","finalArrivalAirportName","arrivalAirportCode","finalArrivalAirportCode","airlineName","airlineCode","operatingAirlineName","operatingAirlineCode","totalFlightDuration","totalDuration","length","undefined","totalPrice","pricePerTraveler","getSingleFlight","response","getUser","userId","postBooking","FlightId","numPassengers","postBody","post","getBookings"],"sources":["/Users/ares.castros/Documents/Breakable Toy II/frontend/src/Utils/api.ts"],"sourcesContent":["import axios from \"axios\";\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\ninterface FlightData {\n  flightId: string;\n  initialDepartureDateTime: string;\n  finalArrivalDateTime: string;\n  departureAirportName: string;\n  departureAirportCode: string;\n  arrivalAirportName: string;\n  arrivalAirportCode: string;\n  airlineName: string;\n  airlineCode: string;\n  operatingAirlineName?: string; // Optional if different from the main airline\n  operatingAirlineCode?: string; // Optional if different from the main airline\n  totalFlightDuration: string;\n  stops?: Array<{\n    airportName: string;\n    airportCode: string;\n    layoverTime: string;\n  }>;\n  totalPrice: number;\n  pricePerTraveler: number;\n}\n\n\nexport const getFlight = (): Promise<FlightData[]> => {\n  return axios\n    .get(`http://localhost:8080/mock-fetch-flight-summary`)\n    .then((res: any) => {\n      return res.data.map((element: any) => {\n        // Extract stops, if any\n        const stops = element.stops ? element.stops.map((stop: any) => ({\n          airportName: stop.airportName,\n          airportCode: stop.airportCode,\n          layoverTime: stop.layoverTime,\n        })) : [];\n\n        return {\n          flightId: element.flightId,\n          initialDepartureDateTime: element.initialDepartureTime,\n          finalArrivalDateTime: element.finalArrivalTime,\n          departureAirportName: element.initialDepartureAirportName,\n          departureAirportCode: element.initialDepartureAirportCode,\n          arrivalAirportName: element.finalArrivalAirportName,\n          arrivalAirportCode: element.finalArrivalAirportCode,\n          airlineName: element.airlineName,\n          airlineCode: element.airlineCode,\n          operatingAirlineName: element.operatingAirlineName || element.airlineName,\n          operatingAirlineCode: element.operatingAirlineCode || element.airlineCode,\n          totalFlightDuration: element.totalDuration,\n          stops: stops.length > 0 ? stops : undefined,\n          totalPrice: element.totalPrice,\n          pricePerTraveler: element.pricePerTraveler,\n        };\n      });\n    });\n};\n\nexport const getSingleFlight = (flightId: string) => {\n  return axios\n    .get(`https://localhost:7039/api/Flight/${flightId}`)\n    .then((response: any) => {\n      return response.data;\n    });\n};\n\nexport const getUser = (userId: number) => {\n  return axios\n    .get(`https://localhost:7039/api/User/${userId}`)\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const postBooking = (\n  userId: number,\n  FlightId: string,\n  numPassengers: number\n) => {\n  const postBody = {\n    numPassengers: numPassengers,\n  };\n\n  return axios\n    .post(\n      `https://localhost:7039/api/Bookings?UserId=${userId}&FlightId=${FlightId}`,\n      postBody\n    )\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const getBookings = (userId: number) => {\n  return axios\n    .get(`https://localhost:7039/api/Bookings?UserId=${userId}`)\n    .then((response) => {\n      return response.data;\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBC,OAAO,CAACC,GAAG,CAACC,4BAA4B,GAAG,GAAG;AAyB9C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAA6B;EACpD,OAAOJ,KAAK,CACTK,GAAG,CAAC,iDAAiD,CAAC,CACtDC,IAAI,CAAEC,GAAQ,IAAK;IAClB,OAAOA,GAAG,CAACC,IAAI,CAACC,GAAG,CAAEC,OAAY,IAAK;MACpC;MACA,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,GAAGD,OAAO,CAACC,KAAK,CAACF,GAAG,CAAEG,IAAS,KAAM;QAC9DC,WAAW,EAAED,IAAI,CAACC,WAAW;QAC7BC,WAAW,EAAEF,IAAI,CAACE,WAAW;QAC7BC,WAAW,EAAEH,IAAI,CAACG;MACpB,CAAC,CAAC,CAAC,GAAG,EAAE;MAER,OAAO;QACLC,QAAQ,EAAEN,OAAO,CAACM,QAAQ;QAC1BC,wBAAwB,EAAEP,OAAO,CAACQ,oBAAoB;QACtDC,oBAAoB,EAAET,OAAO,CAACU,gBAAgB;QAC9CC,oBAAoB,EAAEX,OAAO,CAACY,2BAA2B;QACzDC,oBAAoB,EAAEb,OAAO,CAACc,2BAA2B;QACzDC,kBAAkB,EAAEf,OAAO,CAACgB,uBAAuB;QACnDC,kBAAkB,EAAEjB,OAAO,CAACkB,uBAAuB;QACnDC,WAAW,EAAEnB,OAAO,CAACmB,WAAW;QAChCC,WAAW,EAAEpB,OAAO,CAACoB,WAAW;QAChCC,oBAAoB,EAAErB,OAAO,CAACqB,oBAAoB,IAAIrB,OAAO,CAACmB,WAAW;QACzEG,oBAAoB,EAAEtB,OAAO,CAACsB,oBAAoB,IAAItB,OAAO,CAACoB,WAAW;QACzEG,mBAAmB,EAAEvB,OAAO,CAACwB,aAAa;QAC1CvB,KAAK,EAAEA,KAAK,CAACwB,MAAM,GAAG,CAAC,GAAGxB,KAAK,GAAGyB,SAAS;QAC3CC,UAAU,EAAE3B,OAAO,CAAC2B,UAAU;QAC9BC,gBAAgB,EAAE5B,OAAO,CAAC4B;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIvB,QAAgB,IAAK;EACnD,OAAOhB,KAAK,CACTK,GAAG,CAAC,qCAAqCW,QAAQ,EAAE,CAAC,CACpDV,IAAI,CAAEkC,QAAa,IAAK;IACvB,OAAOA,QAAQ,CAAChC,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMiC,OAAO,GAAIC,MAAc,IAAK;EACzC,OAAO1C,KAAK,CACTK,GAAG,CAAC,mCAAmCqC,MAAM,EAAE,CAAC,CAChDpC,IAAI,CAAEkC,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAAChC,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMmC,WAAW,GAAGA,CACzBD,MAAc,EACdE,QAAgB,EAChBC,aAAqB,KAClB;EACH,MAAMC,QAAQ,GAAG;IACfD,aAAa,EAAEA;EACjB,CAAC;EAED,OAAO7C,KAAK,CACT+C,IAAI,CACH,8CAA8CL,MAAM,aAAaE,QAAQ,EAAE,EAC3EE,QACF,CAAC,CACAxC,IAAI,CAAEkC,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAAChC,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMwC,WAAW,GAAIN,MAAc,IAAK;EAC7C,OAAO1C,KAAK,CACTK,GAAG,CAAC,8CAA8CqC,MAAM,EAAE,CAAC,CAC3DpC,IAAI,CAAEkC,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAAChC,IAAI;EACtB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}